import MySQLdb
import bcrypt
import loft
from flask import (Flask, url_for, redirect, request, render_template, flash, session, send_from_directory, Response)
from werkzeug import secure_filename
import sys, os, random
import imghdr


app = Flask(__name__)

app.secret_key = "Mb.Jp2u/6XT/)b`."

app.config['UPLOADS'] = 'uploads'

@app.route('/start/', methods = ['POST', 'GET'])
# For first time users to create an account
# Would need to create an extra section for tenants
def addUser():
    if request.method == 'POST':
        conn = loft.getConn('loft')
        name = request.form.get('name')
        email = request.form.get('email')
        school = request.form.get('school')
        pw = request.form.get('pw')
        pw2 = request.form.get('pw_confirm')
        valid = True
        
        if(email[-4:] != ".edu" or "@" not in email):
            flash("Please enter a valid school email")
            valid = False
        if(pw != pw2):
            flash("The passwords do not match")
            valid = False
        elif (len(pw) < 6 or any(char.isdigit() for char in pw) == False): #only checks when passwords match
            flash("Password is too weak, must be longer than 6 characters and contain a digit")
            valid = False
        
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
        curs.execute('SELECT email FROM users WHERE email = %s', [email])
        row = curs.fetchone()
        if row is not None:
            flash('An account with that email already exists')
            valid = False
        
        if valid == True:
            hashed = bcrypt.hashpw(pw.encode('utf-8'), bcrypt.gensalt())
            loft.createUser(conn, name, email, hashed, school)
            return redirect(url_for('login'))
        else:
            return render_template('addUser.html')
    else:
        return render_template('addUser.html')

@app.route('/login/', methods=['POST', 'GET'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        passwd = request.form['pw']
        conn = loft.getConn('loft')
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
        curs.execute('SELECT pw FROM users WHERE email = %s',
                     [email])
        row = curs.fetchone()
        if row is None:
            # Same response as wrong password, so no information about what went wrong
            flash('login incorrect. Try again or join')
            return redirect( url_for('login'))
        hashed = row['pw']
        # strings always come out of the database as unicode objects
        if bcrypt.hashpw(passwd.encode('utf-8'),hashed.encode('utf-8')) == hashed:
            curs2 = conn.cursor(MySQLdb.cursors.DictCursor)
            curs2.execute('''select UID from users where email = %s''',
                        [email]) #emails are unique
            row2 = curs2.fetchone()
            UID = row2['UID']
            
            flash('successfully logged in with '+email)
            session['UID'] = UID
            #session['logged_in'] = True
            #session['visits'] = 1
            return redirect(url_for('showProperties'))
        else:
            flash('login incorrect. Try again or join')
            return redirect(url_for('login'))
    else:
        if 'UID' in session:
            flash('You are already logged in. Please first logout to log in again.')
            return redirect(url_for('showProperties'))
        return render_template('login.html')

@app.route('/pic/<filename>')
def pic(filename):
    val = send_from_directory(app.config['UPLOADS'], filename)
    return val

@app.route('/add-property/', methods = ["GET","POST"])
# For first time users to create an account
def addProperty():
    if request.method == 'POST':
        if 'UID' not in session:
            return redirect(url_for('login'))
        
        conn = loft.getConn('loft')

        UID = session['UID']
        name = request.form.get('name')
        descrip = request.form.get('descrip')
        loc = request.form.get('location')
        price = request.form.get('price')
        smoker = request.form.get('smoker')
        gender = request.form.get('gender')
        pet = request.form.get('pet')

        start1 = request.form.get('start1')
        end1 = request.form.get('end1')
        
        Valid = True 
        if name == '':
            flash('Please enter a valid name')
            Valid = False
        if loc == '':
            flash('Please enter a valid location')
            Valid = False
        if price < 0 or price == '':
            flash('Please enter a valid price')
            Valid = False
        if start1 == '' or end1 == '':
            flash('Please insert at least 1 date range')
            Valid = False
        
        if Valid == False:
            return render_template('addProp.html')
        else:
            try:
                f = request.files['pic'] #update front-end to ask for pic
                print(f)
                mime_type = imghdr.what(f.stream)
                print mime_type.lower()
                if mime_type.lower() not in ['jpeg','gif','png']:
                    raise Exception('Not a JPEG, GIF or PNG: {}'.format(mime_type))
                #filename = secure_filename('{}'.format(mime_type))
                filename = secure_filename('{}-{}.{}'.format(UID,name,mime_type))
                print("filename: ", filename)
                pathname = os.path.join(app.config['UPLOADS'],filename)
                print("pathname: ", pathname)
                f.save(pathname)
                flash('Upload successful')
            
            except Exception as err:
                flash('Upload failed {why}'.format(why=err))
                print('Upload failed {why}'.format(why=err))
                return render_template('addProp.html')

            row = loft.createProperty(conn, name, descrip, loc, price, smoker, gender, pet, filename)
            
            PID = row['last_insert_id()']
            
            loft.createDate(conn, PID, start1, end1)
    
            start2 = request.form.get('start2')
            end2 = request.form.get('end2')
            if start2 != '' or end2 != '':
                loft.createDate(conn, PID, start2, end2)
            
            start3 = request.form.get('start3')
            end3 = request.form.get('end3')
            if start3 != '' or end3 != '':
                loft.createDate(conn, PID, start3, end3)

            UID = session['UID']
            loft.addHostProp(conn, UID, PID)
            
            return redirect(url_for('showMyProperties'))
    
    else:
        if 'UID' not in session:
            flash('You must be logged in to create a property')
            return redirect(url_for('login'))
        else:
            return render_template('addProp.html')

@app.route('/', methods = ["GET","POST"])
def showProperties():
    conn = loft.getConn('loft')
    if request.method == 'POST':
        gender = int(request.form.get('gender'))
        
        location = request.form.get('location')
        
        price = request.form.get('price') #might use price ranges in the future
        if price == '':
            price = 100000 #no upper limit
        
        start = request.form.get('start')
        end = request.form.get('end')
        if start == '':
            start = '3000-12-31' #no lower limit
        if end == '':
            end = '1000-01-01' #no upper limit
        
        print("Gender: " + str(gender))
        print("Location: " + (location))
        print("Price: " + str(price))
        print("Start: " + start)
        print("End: " + end)
        # propList = loft.getAll(conn) #shows all properties

        propList = loft.searchProp(conn, gender, location, price, start, end)
    else: 
        propList = loft.getAll(conn) #shows all properties
    return render_template('index.html', propList = propList)

@app.route('/show/<id>', methods = ["POST", "GET"])
def showPage(id):
    conn = loft.getConn('loft')
    if request.method == 'POST':
        if 'UID' not in session:
            return redirect(url_for('login'))
        
        UID = session['UID']
        prop = loft.getOne(conn, id)
        dates = loft.getDates(conn, id)

        start = request.form.get('start')
        end = request.form.get('end')
        loft.book(conn, UID, id, start, end)
        
        return render_template(url_for('showMyReservations'))

    else:
        prop = loft.getOne(conn, id)
        dates = loft.getDates(conn, id)
        return render_template('show.html', item = prop, dates = dates)
        

@app.route('/my-properties', methods = ["POST", "GET"])
def showMyProperties():
    conn = loft.getConn('loft')
    if 'UID' not in session:
        flash('You must be logged in to view properties')
        return redirect(url_for('login'))
            
    UID = session['UID']
    propList = loft.getHostProps(conn, UID)
        
    print(propList)
        
    return render_template('my-properties.html', propList = propList)
    
@app.route('/my-reservations', methods = ["POST", "GET"])
def showMyReservations():
    conn = loft.getConn('loft')
    if 'UID' not in session:
        flash('You must be logged in to view properties')
        return redirect(url_for('login'))
            
    UID = session['UID']
    propList = loft.getRenterProps(conn, UID)
        
    print(propList)
        
    return render_template('my-reservations.html', propList = propList)

@app.route('/profile/<id>', methods = ["GET"])
def profilePage(id):
    conn = loft.getConn('loft')
    profile = loft.getProfile(conn, id)
    return render_template('profile.html', profile = profile)

@app.route('/edit/<id>', methods = ["GET", "POST"])
def edit(id):
    conn = loft.getConn('loft')
    if request.method == 'GET':
        if 'UID' not in session:
            return redirect(url_for('login'))
        
        UID_session = session['UID']
        
        curs = conn.cursor(MySQLdb.cursors.DictCursor)
        curs.execute('''select UID from host_prop where PID = %s''', [id])
        row = curs.fetchone()
        UID_prop = row['UID']
        
        if UID_session == UID_prop:
            conn = loft.getConn('loft')
            prop = loft.getOne(conn, id)
            return render_template('edit.html', item = prop)
        else:
            return redirect(url_for('showPage', id = id))
    else:
        conn = loft.getConn('loft')
        name = request.form.get('name')
        descrip = request.form.get('descrip')
        loc = request.form.get('location')
        price = request.form.get('price')
        smoker = request.form.get('smoker')
        gender = request.form.get('gender')
        pet = request.form.get('pet')
        loft.updateProperty(conn, id, name, descrip, loc, price, smoker, gender, pet)
        return redirect(url_for('showPage', id = id))
    
@app.route('/delete/<id>', methods = ['GET', 'DELETE'])
def delete(id):
    conn = loft.getConn('loft')
    loft.deleteProp(conn, id)
    return redirect(url_for('showProperties'))
   
 
@app.route('/logout/')
def logout():
    try:
        if 'UID' in session:
            UID = session['UID']
            session.pop('UID')
            #session.pop('logged_in')
            flash('You are logged out')
            return redirect(url_for('login'))
        else:
            flash('you are not logged in. Please login or join')
            return redirect( url_for('login') )
    except Exception as err:
        flash('some kind of error '+str(err))
        return redirect( url_for('index') )

if __name__ == '__main__':
    app.debug = True
    app.run('0.0.0.0',8081)#!/usr/bin/python2.7

import sys
import MySQLdb

def getConn(db):
    conn =  MySQLdb.connect(host='localhost',
                           user='root',
                           passwd='',
                           db=db)
    conn.autocommit(True)
    return conn

#--Adding to Database-- 
def createUser(conn, name, email, pw, university):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''insert into users values (%s, %s, %s, %s, NULL)''',
                (name, email, pw, university,))
    return curs.fetchone()
    
def createProperty(conn, name, descrip, loc, price, smoker, gender, pet, picfile):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''insert into properties values (%s, %s, %s, %s, %s, %s, %s, %s, NULL)''', 
                (name, descrip, loc, price, smoker, gender, pet, picfile))
    curs.execute('''select last_insert_id() from properties''')
    return curs.fetchone()

def createDate(conn, PID, start, end):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''insert into dates values (%s, %s, %s)''',
                (PID, start, end,))
    return curs.fetchone()

def addTenantFeature(conn, UID, feature):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''insert into featuresTenants values (%s, %s)''',
                (UID, feature,))
    return curs.fetchone()

def addPropertyFeature(conn, PID, feature):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''insert into featuresProperties values (%s, %s)''',
                (PID, feature,))
    return curs.fetchone()
    
def addHostProp(conn, UID, PID):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''insert into host_prop values (%s, %s)''',
                (UID, PID,))
    return curs.fetchone()

def addRenterProp(conn, UID, PID, start, end):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''insert into renter_prop values (%s, %s, %s, %s)''',
                (UID, PID, start, end))
    return curs.fetchone()

# Searching properties based on specific filters
def searchProp(conn, gender, location, price, start, end):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    location = "%" + location + "%"
    if (gender == 3): #no preference
        PID_list = curs.execute('''select * from (properties inner join dates
                        on dates.PID = properties.PID)
                        where propLocation like %s and propPrice <= %s
                        and startDate <= %s and endDate >= %s 
                        group by properties.PID''',
                    (location, price, start, end))
    else:
        curs.execute('''select * from (properties inner join dates
                        on dates.PID = properties.PID)
                        where propGender = %s and propLocation like %s and propPrice <= %s
                        and startDate <= %s and endDate >= %s 
                        group by properties.PID''',
                    (gender, location, price, start, end))
    return curs.fetchall()

#updating table values
def updateUser(conn, UID, name, email, pw, university):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''update users set name = %s, email = %s, pw = %s, university = %s where UID = %s''', 
                (name, email, pw, university, UID))
    return curs.fetchone
    
def updateProperty(conn, PID, name, descrip, loc, price, smoker, gender, pet):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''update properties 
                        set 
                            propName = %s, 
                            propDescription = %s, 
                            propDescription = %s, 
                            propPrice = %s, 
                            propSmoker = %s, 
                            propGender = %s, 
                            propPet = %s 
                        where 
                            PID = %s''', 
                (name, descrip, loc, price, smoker, gender, pet, PID))
    return curs.fetchone()

def deleteDate(conn, PID, start):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''delete from dates where PID = %s and startDate = %s''',
                (PID, start)) #assuming no two date ranges start at the same time
    return curs.fetchone()

def book(conn, UID, PID, start, end):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    addRenterProp(conn, UID, PID, start, end)
    deleteDate(conn, PID, start)
    curs.execute('''select * from renter_prop where UID = %s''', [UID])
    return curs.fetchall()

def getAll(conn):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from properties''')
    return curs.fetchall()

def getOne(conn, id):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from properties where PID = %s''', [id])
    return curs.fetchone()
    
def getProfile(conn, id):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from users where UID = %s''', [id])
    return curs.fetchone()
    
def deleteProp(conn, id):
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''delete from properties where PID = %s''', [id])
    return 

def getDates(conn, id):
    '''retrieves all available dates for this property'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from dates where PID = %s''', [id])
    return curs.fetchall()

def getHostProps(conn, UID):
    '''retrieves all the host's properties'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from (host_prop inner join properties 
                on host_prop.PID = properties.PID)
                where host_prop.UID = %s
                group by properties.PID''', [UID])
    return curs.fetchall()

def getRenterProps(conn, UID):
    '''retrieves all the renter's properties'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select * from (renter_prop inner join properties 
                on renter_prop.PID = properties.PID)
                where renter_prop.UID = %s
                group by properties.PID''', [UID])
    return curs.fetchall()
    
if __name__ == '__main__':
    conn = getConn('loft')
    # createDate(conn, 2, '2018-01-01', '2018-06-01')
    # print(searchProp(conn,3,'',100000, '2019-12-31','2020-05-01'))
    # print(searchProp(conn,3,'',100000, '3000-12-31', '1000-01-01'))
    # print(searchProp(conn,2,'',100000, '3000-12-31','1000-01-01'))
    createProperty(conn, 'Litter box', 'Litter box in Front End', 'Front End', 50, 0, 3, 1, 'Litter_Box.jpeg')
    # user = createUser(conn, 'Ally', 'ally@tufts.edu', 'Password123', 'Tufts University')
    # prop = createProperty(conn, 'House', 'A House in Boston', 'Boston', 800, 0, 1, 0)
    # print prop
    # print(searchProp(conn,3,'Cambridge',10000))
    # print(searchProp(conn,3,"",10000))

--
-- Current Database: `loft`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `loft` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `loft`;

/* Create tables for user and properties */

drop table if exists tenants;
drop table if exists users;
drop table if exists properties;
drop table if exists dates;
drop table if exists featuresTenants;
drop table if exists featuresProperties;

create table users(
    `name` varchar(20) DEFAULT NULL,
    `email` varchar(30) DEFAULT NULL,
    `pw` varchar(60) DEFAULT NULL,
    `university` varchar(40) DEFAULT NULL,
    UID int(15) unsigned NOT NULL AUTO_INCREMENT,
    PRIMARY KEY (UID)
);

create table tenants(
    smoker bit DEFAULT 0, /*1 if smoker, 0 if not*/
    gender int(1) DEFAULT 0, /*1 for female, 2 for male, 3 for other*/
    pet bit DEFAULT 0, /*1 if has pet, 0 if not*/
    UID int(15) unsigned,
    foreign key (UID) references users(UID) on delete cascade on update cascade
)
ENGINE = InnoDB;

create table properties(
  -- add in description
    /* how do we want to display features, gender, availability? */
    `propName` varchar(100) DEFAULT NULL,
    `propDescription` varchar(100) DEFAULT NULL,
    `propLocation` varchar(150) DEFAULT NULL,
    `propPrice` int(10) unsigned DEFAULT NULL,
    `propSmoker` int(1) DEFAULT NULL, /*1 if okay with smoker, 0 if not*/
    `propGender` int(1) DEFAULT NULL, /*1 if female only, 2 if male only, 3 if no preference*/
    `propPet` int(1) DEFAULT NULL, /*1 if okay with pet, 0 if not*/
    `propFilename` varchar(50),
    `PID` int(10) unsigned NOT NULL AUTO_INCREMENT,
    PRIMARY KEY (PID)
);

create table dates(
    PID int(10),
    startDate date,
    endDate date
);

create table featuresTenants(
    UID int(10),
    features varchar(100)
);

create table featuresProperties(
    PID int(10),
    features varchar(100)
);

/* Map relationships*/

-- table to map one to many relationship of hosts and properties
drop table if exists host_prop;
create table host_prop(
    UID int,
    PID int,
    primary key (UID, PID)
);

drop table if exists renter_prop;
create table renter_prop(
    UID int,
    PID int,
    startDate date,
    endDate date,
    primary key (UID, PID)
);


-- INSERT INTO users VALUES ('Freddie', 'freddie@bu.edu', 'password','Boston University',1), ('Mary','mary@mit.edu', 'password','Massachusetts Institute of Technology', NULL);
-- INSERT INTO tenants VALUES (0, 2, 0, 1);
-- INSERT INTO properties VALUES ('Studio apartment', 'Cozy studio with natural lighting', 'Central Square', 1000, 0, 3, 1, NULL), ('2BR Apartment', 'Charming retreat by Newbury street', 'Boston', 1700, 0, 3, 0, NULL), ('1 BR near Kendall','Single bedroom in apartment near Kendall Square','Kendall Square, Cambridge','1200', 1, 2, 1, NULL);
-- INSERT INTO `properties` VALUES ('1 BR near Kendall','Single bedroom in apartment near Kendall Square','Kendall Square, Cambridge','1000',1), ('3 BR apartment near Central','Entire apartment include 3 BR located in Central','Central Square, Cambridge','4000',2);
-- INSERT INTO `host_prop` VALUES (1,1), (1, 2);Ctrl-C -- exit!
html, body {
    height: 100%;
}

a.card {
  color: #212529;
  text-decoration: none;
}

a.card:hover {
  color: #6959cd;
  text-decoration: none;
}

<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name=author content="">
    <meta name=description content="">
    <meta name=keywords content="">
    <title></title>
    <!-- css stylesheets -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/css/bootstrap.min.css" integrity="sha384-y3tfxAZXuh4HwSYylfB+J125MxIs6mR5FOHamPBG064zB+AFeWH94NdvaCBm8qnd" crossorigin="anonymous">
    <!-- fonts -->
</head>
<body>
    <!--display all flashed messages-->
    {% with messages = get_flashed_messages() %}
        {% if messages %}
            <div id="messages">
            {% for message in messages %}
                <p>{{ message }}</p>
            {% endfor %}
            </div>
        {% endif %}
    {% endwith %}

  <div align="center">
        <div class="card border-dark mb-3" style="max-width: 40rem;">
        <div style="padding: 30px;">
          <div class="card-header">Create New User Profile</div>
            {% if user %}
            <form method = "POST" action = "{{ url_for('addUser') }}">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" class="form-control" name="name" aria-describedby="name of person" placeholder="Enter name" value="{{user.name}}">
                </div>

                <div class="form-group">
                    <label for="email">University Email </label>
                    <input type="text" class="form-control" name="email" aria-describedby="email of person" placeholder="Enter university email" value="{{user.email}}">
                </div>
                
                <div class="form-group">
                    <label for="school">University</label>
                    <input type="text" class="form-control" name="school" aria-describedby="school of person" placeholder="Enter university" value="{{user.school}}">
                </div>
                
                <div class="form-group">
                    <label for="pw">Password</label>
                    <input type="password" class="form-control" name="pw" aria-describedby="password" placeholder="Enter password" value="{{user.pw}}">
                    <small class="form-text text-muted">Password must be longer than 6 characters and contain a digit</small>
                </div>
                
                <div class="form-group">
                    <label for="pw_confirm">Re-enter Password</label>
                    <input type="password" class="form-control" name="pw_confirm" aria-describedby="password" placeholder="Re-enter password" value="{{user.pw2}}">
                </div>
                
              <button type="submit" class="btn btn-primary sign_up">Sign Up</button>
            </form>
            {% else %}
            <form method = "POST" action = "{{ url_for('addUser') }}">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" class="form-control" name="name" aria-describedby="name of person" placeholder="Enter name">
                </div>

                <div class="form-group">
                    <label for="email">University Email </label>
                    <input type="text" class="form-control" name="email" aria-describedby="email of person" placeholder="Enter university email">
                </div>
                
                <div class="form-group">
                    <label for="school">University</label>
                    <input type="text" class="form-control" name="school" aria-describedby="school of person" placeholder="Enter university">
                </div>
                
                <div class="form-group">
                    <label for="pw">Password</label>
                    <input type="password" class="form-control" name="pw" aria-describedby="password" placeholder="Enter password">
                    <small class="form-text text-muted">Password must be longer than 6 characters and contain a digit</small>
                </div>
                
                <div class="form-group">
                    <label for="pw_confirm">Re-enter Password</label>
                    <input type="password" class="form-control" name="pw_confirm" aria-describedby="password" placeholder="Re-enter password">
                </div>
                
              <button type="submit" class="btn btn-primary sign_up">Sign Up</button>
            </form>
            {% endif %}
        </div>
        </div>
     </div>
    </div>

</body>

</html>
<!--Purpose: Add a property form-->

{% extends "layout.html" %}
{% block title %}Add Property{% endblock %}
{% block content %}
    <div align="center">
        <div class="card border-dark mb-3" style="max-width: 40rem;">
        <div style="padding: 30px;">
          <div class="card-header">Create New Property</div>
            <form method = "POST" action = "{{ url_for('addProperty') }}" enctype="multipart/form-data">

                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" class="form-control" name="name" aria-describedby="name of property" placeholder="Enter name">
                    <!--<small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>-->
                </div>

                <div class="form-group">
                    <label for="descrip">Description</label>
                    <textarea class="form-control" name="descrip" rows="3" placeholder="Describe your property"></textarea>
                </div>

                <div class="form-group">
                    <label for="location">Location</label>
                    <input type="text" class="form-control" name="location" aria-describedby="enter location" placeholder="Enter your property location">
                </div>

                <div class="form-group">
                    <label for="price">Price Per Month</label>
                    <input type="number" class="form-control" name="price" aria-describedby="enter price" placeholder="Enter price">
                </div>

                <fieldset class="form-group">
                <label for="smoker">Is your property smoker friendly?</label>
                <div class="form-check">
                  <label class="form-check-label">
                    <input type="radio" class="form-check-input" name="smoker" id="smokerYes" value="1">
                    Yes
                  </label>
                </div>
                <div class="form-check">
                <label class="form-check-label">
                    <input type="radio" class="form-check-input" name="smoker" id="smokerNo" value="0">
                        No
                    </label>
                </div>
                </fieldset>
                
                <fieldset class="form-group">
                <label for="gender">Do you have a preferred gender?</label>
                <div class="form-check">
                  <label class="form-check-label">
                    <input type="radio" class="form-check-input" name="gender" id="gender1" value="1">
                    All female
                  </label>
                </div>
                <div class="form-check">
                <label class="form-check-label">
                    <input type="radio" class="form-check-input" name="gender" id="gender2" value="2">
                    All male
                 </label>
                </div>
                <div class="form-check">
                <label class="form-check-label">
                    <input type="radio" class="form-check-input" name="gender" id="gender3" value="3">
                    Other
                  </label>
                </div>
              </fieldset>
              
                <fieldset class="form-group">
                <label for="pet">Is your property pet friendly?</label>
                <div class="form-check">
                  <label class="form-check-label">
                    <input type="radio" class="form-check-input" name="pet" id="petYes" value="1">
                    Yes
                  </label>
                </div>
                <div class="form-check">
                <label class="form-check-label">
                    <input type="radio" class="form-check-input" name="pet" id="petNo" value="0">
                        No
                    </label>
                </div>
                
                <label>Available Date Ranges</label>
                <br>
                <label>Date Ranges 1:</label>
                
                <div class="container col-sm-12" align="center">
                  <div class="form-group">
                    <label for="start1" class="control-label">Start: </label>
                    <input type="date" class="control-label" name="start1" id="start1"></input>                    
                  </div>
                </div>
                
                <div class="container col-sm-12" align="center">
                  <div class="form-group">
                    <label for="end1" class="control-label">End: </label>
                    <input type="date" class="control-label" name="end1" id="end1"></input>
                  </div>
                </div>
                
                <label>Date Ranges 2:</label>
                
                <div class="container col-sm-12" align="center">
                  <div class="form-group">
                    <label for="start2" class="control-label">Start: </label>
                    <input type="date" class="control-label" name="start2" id="start2"></input>                    
                  </div>
                </div>
                
                <div class="container col-sm-12" align="center">
                  <div class="form-group">
                    <label for="end2" class="control-label">End: </label>
                    <input type="date" class="control-label" name="end2" id="end2"></input>
                  </div>
                </div>
                
                <label>Date Ranges 3:</label>
                
                <div class="container col-sm-12" align="center">
                  <div class="form-group">
                    <label for="start3" class="control-label">Start: </label>
                    <input type="date" class="control-label" name="start3" id="start3"></input>                    
                  </div>
                </div>
                
                <div class="container col-sm-12" align="center">
                  <div class="form-group">
                    <label for="end3" class="control-label">End: </label>
                    <input type="date" class="control-label" name="end3" id="end3"></input>
                  </div>
                </div>
                
                <div class="form-group">
                    <label for="pic" class="control-label">Pic: </label>
                    <input type="file" class="control-label" name="pic">
                </div>
                
              <input type="submit" value ="Submit" class="btn btn-dark"></input>
            </form>
        </div>
        </div>
     </div>
    </div>
{% endblock %}
<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name=author content="">
    <meta name=description content="">
    <meta name=keywords content="">
    <title>Create Account</title>
    <!-- css stylesheets -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <link rel="stylesheet" href="/static/app.css" type="text/css">
    <!-- fonts -->
</head>
<body>
    <!--display all flashed messages-->
    {% with messages = get_flashed_messages() %}
        {% if messages %}
            <div id="messages">
            {% for message in messages %}
                <p>{{ message }}</p>
            {% endfor %}
            </div>
        {% endif %}
    {% endwith %}

  <div align="center">
        <div class="card border-dark mb-5 mt-5" style="max-width: 40rem;">
        <div style="padding: 30px;">
          <div class="card-header">Create New User Profile</div>
            {% if user %}
            <form method = "POST" action = "{{ url_for('addUser') }}">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" class="form-control" name="name" aria-describedby="name of person" placeholder="Enter name" value="{{user.name}}">
                </div>

                <div class="form-group">
                    <label for="email">University Email </label>
                    <input type="text" class="form-control" name="email" aria-describedby="email of person" placeholder="Enter university email" value="{{user.email}}">
                </div>
                
                <div class="form-group">
                    <label for="school">University</label>
                    <input type="text" class="form-control" name="school" aria-describedby="school of person" placeholder="Enter university" value="{{user.school}}">
                </div>
                
                <div class="form-group">
                    <label for="pw">Password</label>
                    <input type="password" class="form-control" name="pw" aria-describedby="password" placeholder="Enter password" value="{{user.pw}}">
                    <small class="form-text text-muted">Password must be longer than 6 characters and contain a digit</small>
                </div>
                
                <div class="form-group">
                    <label for="pw_confirm">Re-enter Password</label>
                    <input type="password" class="form-control" name="pw_confirm" aria-describedby="password" placeholder="Re-enter password" value="{{user.pw2}}">
                </div>
                
              <button type="submit" class="btn btn-primary sign_up">Sign Up</button>
            </form>
            {% else %}
            <form method = "POST" action = "{{ url_for('addUser') }}">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" class="form-control" name="name" aria-describedby="name of person" placeholder="Enter name">
                </div>

                <div class="form-group">
                    <label for="email">University Email </label>
                    <input type="text" class="form-control" name="email" aria-describedby="email of person" placeholder="Enter university email">
                </div>
                
                <div class="form-group">
                    <label for="school">University</label>
                    <input type="text" class="form-control" name="school" aria-describedby="school of person" placeholder="Enter university">
                </div>
                
                <div class="form-group">
                    <label for="pw">Password</label>
                    <input type="password" class="form-control" name="pw" aria-describedby="password" placeholder="Enter password">
                    <small class="form-text text-muted">Password must be longer than 6 characters and contain a digit</small>
                </div>
                
                <div class="form-group">
                    <label for="pw_confirm">Re-enter Password</label>
                    <input type="password" class="form-control" name="pw_confirm" aria-describedby="password" placeholder="Re-enter password">
                </div>
                
              <button type="submit" class="btn btn-primary sign_up">Sign Up</button>
            </form>
            {% endif %}
        </div>
        </div>
     </div>
    </div>

</body>

</html>
<!--Purpose: Edit a property form-->

{% extends "layout.html" %}
{% block title %}Edit Property{% endblock %}
{% block content %}
    <div align="center">
        <div class="card border-dark mb-3" style="max-width: 40rem;">
        <div style="padding: 30px;">
          <div class="card-header">Edit Property</div>
          
            <form method = "POST" action = "{{ url_for('edit', id=item.PID)}}">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" class="form-control" name="name" aria-describedby="name of property" value = "{{item.propName}}">
                    <!--<small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>-->
                </div>
                <!--descrip = request.form.get('descrip')-->
                <div class="form-group">
                    <label for="descrip">Description</label>
                    <textarea class="form-control" name="descrip" rows="3">{{item.propDescription}}</textarea>
                </div>
                <!--loc = request.form.get('location')-->
                <div class="form-group">
                    <label for="location">Location</label>
                    <input type="text" class="form-control" name="location" aria-describedby="enter location" value = "{{item.propLocation}}">
                </div>
                <!--price = request.form.get('price')-->
                <div class="form-group">
                    <label for="price">Price Per Month</label>
                    <input type="number" class="form-control" name="price" aria-describedby="enter price" value = "{{item.propPrice}}">
                </div>
    
            <fieldset class="form-group">
            <label for="smoker">Is your property smoker friendly?</label>   
                <div class="form-check">
                    <label class="form-check-label">
                        {% if item.propSmoker == 0 %}
                            <input type="radio" class="form-check-input" name="smoker" id="smokerYes" value="1" checked>
                        {% else %}
                            <input type="radio" class="form-check-input" name="smoker" id="smokerYes" value="1">
                        {% endif %}
                        Yes
                    </label>
                </div>
                <div class="form-check">
                    <label class="form-check-label">
                        {% if item.propSmoker == 1 %}
                            <input type="radio" class="form-check-input" name="smoker" id="smokerNo" value="0" checked>
                        {% else %}
                            <input type="radio" class="form-check-input" name="smoker" id="smokerNo" value="0">
                        {% endif %}
                        No
                    </label>
                </div>
            </fieldset>
            
            <fieldset class="form-group">
            <label for="gender">Do you have a preferred gender?</label>
                <div class="form-check">
                  <label class="form-check-label">
                    {% if item.propGender == 1 %}
                        <input type="radio" class="form-check-input" name="gender" id="gender1" value="1" checked>
                    {% else %}
                        <input type="radio" class="form-check-input" name="gender" id="gender1" value="1">
                    {% endif %}  
                    All female
                  </label>
                </div>
                <div class="form-check">
                <label class="form-check-label">
                    {% if item.propGender == 2 %}
                        <input type="radio" class="form-check-input" name="gender" id="gender2" value="2" checked>
                    {% else %}
                        <input type="radio" class="form-check-input" name="gender" id="gender2" value="2">
                    {% endif %}
                    All male
                 </label>
                </div>
                <div class="form-check">
                <label class="form-check-label">
                    {% if item.propGender == 3 %}
                        <input type="radio" class="form-check-input" name="gender" id="gender3" value="3"checked>
                    {% else %}
                        <input type="radio" class="form-check-input" name="gender" id="gender3" value="3">
                    {% endif %}
                    
                    Other
                  </label>
                </div>
              </fieldset>
              
              <fieldset class="form-group">
                <label for="pet">Is your property pet friendly?</label>
                <div class="form-check">
                    <label class="form-check-label">
                        {{item.propGender}}
                        {% if item.propPet == 1 %}
                            <input type="radio" class="form-check-input" name="pet" id="petYes" value="1" checked>
                        {% else %}
                            <input type="radio" class="form-check-input" name="pet" id="petYes" value="1">
                        {% endif %}
                        Yes
                    </label>
                </div>
                <div class="form-check">
                    <label class="form-check-label">
                        {{item.propGender}}
                        {% if item.propPet == 0 %}
                            <input type="radio" class="form-check-input" name="pet" id="petNo" value="0" checked>
                        {% else %}
                            <input type="radio" class="form-check-input" name="pet" id="petNo" value="0">
                        {% endif %}
                        No
                    </label>
                </div>
              </fieldset>
              <button type="submit" class="btn btn-dark">Submit</button>
            </form>
        </div>
        </div>
     </div>
    </div>
{% endblock %}<!--Purpose: display list of all available spaces-->
<!--Purpose: display the individual user's profile/settings page-->
{% extends "layout.html" %}
{% block title %}Home{% endblock %}
{% block content %}
<div class = "container">
    <form method = "POST" action = "{{ url_for('showProperties') }}">
      <p>Filter by: </p>
      <div class="form-inline">
        <div class = "container row">
          <div class="col-sm-1"></div>
          <div class="col-sm-2">
            <div class="form-group">
            <label for="gender">Gender: </label>
            <select name = 'gender'>
            <option value = 3>Any</option>
            <option value = 1>Female Only</option>
            <option value = 2>Male Only</option>
            <option value = 3>Other</option>
            </select>
            </div>
          </div>
          
          <div class="col-sm-2">
            <div class="form-group">
              <label for="location">Location:  </label>
              <input type="text" class="filter" name="location" placeholder="Enter Location">
            </div>
          </div>
          
          <div class="col-sm-2">
            <div class="form-group">
              <label for="price">Max Price:  </label>
              <input type="number" class="filter" name="price" placeholder="Enter maximum price per month">
            </div>
          </div>
          
          <div class="col-sm-2">
            <div class="form-group">
              <label for="start">Start Date: </label>
              <input type="date" class="filter" name="start">
            </div>
            
            <div class="form-group">
              <label for="end">End Date: </label>
              <input type="date" class="filter" name="end">
            </div>
          </div>
          <div class="col-sm-2">
            <div class="form-group">
              <input class="btn btn-dark" type = "submit" value="Submit"></input>
            </div>
          </div>
      </div>
      </div>
    </form>
    
    <div class="row mt-5">
      {% for item in propList%}
        <div class = "col-lg-3 col-sm-6" align = "center">
          <!-- Change the border color -->
          <div class="">
            <a href='/show/{{item.PID}}' class="card border-dark mb-3" data-id={{item.PID}} style="max-width: 18rem;">
              <div style="padding: 30px;">
                <div class="card-header">{{item.propName}}</div>
                
                <img class="card-img-top" src="{{url_for('pic',filename=item.propFilename)}}" alt="{{item.propFilename}}">
                <div class="card-body text-dark">
                  <h5 class="card-text">{{item.propDescription}}</h5>
                  <p class="card-text">{{item.propLocation}}</p>
                  <p class="card-text">{{item.propPrice}}</p>
                  
                  {% if item.propSmoker == 0 %}
                  <p class="card-text">Smokers not allowed</p>
                  {% else %}
                  <p class="card-text">Smoker friendly</p>
                  {% endif %}
                  
                  {% if item.propGender == 1 %}
                  <p class="card-text">Female only</p>
                  {% elif item.propGender == 2 %}
                  <p class="card-text">Male only</p>
                  {% else %}
                  <p class="card-text">No gender preference</p>
                  {% endif %}
                  
                  {% if item.propPet == 1 %}
                  <p class="card-text">Pet friendly</p>
                  {% else %}
                  <p class="card-text">Pets not allowed</p>
                  {% endif %}
                </div>
                
              </div>
            </a>
          </div>
        </div>
      {% endfor %}
  </div>
</div>
{% endblock %}
<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name=author content="">
    <meta name=description content="">
    <meta name=keywords content="">
    <title>{% block title %}{% endblock %}</title>
    <!-- css stylesheets -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <link rel="stylesheet" href="/static/app.css" type="text/css">
    <!-- fonts -->
</head>

<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-5">
      <a class="navbar-brand" href="/">Loft39s</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarText">
        <ul class="navbar-nav ml-auto">
          <li class="nav-item active">
            <a class="nav-link" href="{{url_for('showMyProperties')}}">My Properties</span></a>
          </li>
          <li class="nav-item active">
            <a class="nav-link" href="{{url_for('showMyReservations')}}">Reservations</a>
          </li>
          <li class="nav-item active">
            <a class="nav-link" href="{{url_for('addProperty')}}">Add Property</a>
          </li>
          <li class="nav-item active">
            <a class="nav-link" href="{{url_for('logout')}}">Log Out</a>
          </li>
        </ul>
      </div>
    </nav>
    
        <!--display all flashed messages-->
    {% with messages = get_flashed_messages() %}
        {% if messages %}
            <div id="messages">
            {% for message in messages %}
                <p>{{ message }}</p>
            {% endfor %}
            </div>
        {% endif %}
    {% endwith %}
    
    <div id="content">{% block content %}{% endblock %}</div>
    
    
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
    {% block script %}{% endblock %}
</body>

</html>

{% extends "layout.html" %}
{% block title %}Log In{% endblock %}
{% block content %}
  <div align="center">
        <div class="card border-dark mb-3" style="max-width: 40rem;">
        <div style="padding: 30px;">
          <div class="card-header">Log in</div>
            <form method = "POST" action = "{{ url_for('login') }}">
                
                <div class="form-group">
                    <label for="email">University Email </label>
                    <input type="text" class="form-control" name="email" aria-describedby="email of person" placeholder="Enter university email">
                </div>
                
                <div class="form-group">
                    <label for="pw">Password</label>
                    <input type="password" class="form-control" name="pw" aria-describedby="password" placeholder="Enter password">
                </div>
                
              <button type="submit" class="btn btn-primary sign_up">Login</button>
              <a href = "{{url_for('addUser')}}"><button type ="button" class="btn btn-primary sign_up">Sign Up</button></a>
            </form>
        </div>
        </div>
     </div>
    </div>
{% endblock %}{% extends "layout.html" %}
{% block title %}My Properties{% endblock %}
{% block content %}
  <div class = "container">
      
      <div class="row mt-5">
        {% for item in propList%}
          <div class = "col-lg-3 col-sm-6" align = "center">
            <!-- Change the border color -->
            <div class="">
              <a href='/show/{{item.PID}}' class="card border-dark mb-3" data-id={{item.PID}} style="max-width: 18rem;">
                <div style="padding: 30px;">
                  <div class="card-header">{{item.propName}}</div>
                  
                  <img class="card-img-top" src="{{url_for('pic',filename=item.propFilename)}}" alt="{{item.propFilename}}">
                  <div class="card-body text-dark">
                    <h5 class="card-text">{{item.propDescription}}</h5>
                    <p class="card-text">{{item.propLocation}}</p>
                    <p class="card-text">{{item.propPrice}}</p>
                    
                    {% if item.propSmoker == 0 %}
                    <p class="card-text">Smokers not allowed</p>
                    {% else %}
                    <p class="card-text">Smoker friendly</p>
                    {% endif %}
                    
                    {% if item.propGender == 1 %}
                    <p class="card-text">Female only</p>
                    {% elif item.propGender == 2 %}
                    <p class="card-text">Male only</p>
                    {% else %}
                    <p class="card-text">No gender preference</p>
                    {% endif %}
                    
                    {% if item.propPet == 1 %}
                    <p class="card-text">Pet friendly</p>
                    {% else %}
                    <p class="card-text">Pets not allowed</p>
                    {% endif %}
                  </div>
                  
                </div>
              </a>
            </div>
          </div>
        {% endfor %}
    </div>
  </div>
{% endblock %}{% extends "layout.html" %}
{% block title %}My Reservations{% endblock %}
{% block content %}
  <div class = "container">
      
      <div class="row mt-5">
        {% for item in propList%}
          <div class = "col-lg-3 col-sm-6" align = "center">
            <!-- Change the border color -->
            <div class="">
              <a href='/show/{{item.PID}}' class="card border-dark mb-3" data-id={{item.PID}} style="max-width: 18rem;">
                <div style="padding: 30px;">
                  <div class="card-header">{{item.propName}}</div>
                  
                  <img class="card-img-top" src="{{url_for('pic',filename=item.propFilename)}}" alt="{{item.propFilename}}">
                  <div class="card-body text-dark">
                    <h5 class="card-text">{{item.propDescription}}</h5>
                    <p class="card-text">{{item.propLocation}}</p>
                    <p class="card-text">{{item.propPrice}}</p>
                    
                    {% if item.propSmoker == 0 %}
                    <p class="card-text">Smokers not allowed</p>
                    {% else %}
                    <p class="card-text">Smoker friendly</p>
                    {% endif %}
                    
                    {% if item.propGender == 1 %}
                    <p class="card-text">Female only</p>
                    {% elif item.propGender == 2 %}
                    <p class="card-text">Male only</p>
                    {% else %}
                    <p class="card-text">No gender preference</p>
                    {% endif %}
                    
                    {% if item.propPet == 1 %}
                    <p class="card-text">Pet friendly</p>
                    {% else %}
                    <p class="card-text">Pets not allowed</p>
                    {% endif %}
                  </div>
                  
                </div>
              </a>
            </div>
          </div>
        {% endfor %}
    </div>
  </div>
{% endblock %}<!--Purpose: display the individual user's profile/settings page-->

{% extends "layout.html" %}
{% block title %}My Profile{% endblock %}
{% block content %}
    <div id="contentContainer">
    <h1>{{profile.name}}</h1>
    <p>{{profile.university}}
    <p>{{profile.email}}</p>
    

    </div>
{% endblock %}<!--Purpose: Show a more detailed view of an individual space-->
{% extends "layout.html" %}
{% block title %}Property Details{% endblock %}
{% block content %}
      <div align = "center">
          <!-- Change the border color -->
          <div href='/show/{{item.PID}}' class="">
            <div class="card border-dark mb-3" data-id={{item.PID}} style="max-width: 40rem;">
              <div style="padding: 30px;">
                <div class="card-header">{{item.propName}}</div>
                
                <img class="card-img-top" src="{{url_for('pic',filename=item.propFilename)}}" alt="{{item.propFilename}}">
                <div class="card-body text-dark">
                  <h5 class="card-text">{{item.propDescription}}</h5>
                  <p class="card-text">{{item.propLocation}}</p>
                  <p class="card-text">Price: {{item.propPrice}}</p>
                    {% if item.propSmoker == 0 %}
                    <p class="card-text">Smokers not allowed</p>
                    {% else %}
                    <p class="card-text">Smoker friendly</p>
                    {% endif %}
                    
                    {% if item.propGender == 1 %}
                    <p class="card-text">Female only</p>
                    {% elif item.propGender == 2 %}
                    <p class="card-text">Male only</p>
                    {% else %}
                    <p class="card-text">No gender preference</p>
                    {% endif %}
                    
                    {% if item.propPet == 1 %}
                    <p class="card-text">Pet friendly</p>
                    {% else %}
                    <p class="card-text">Pets not allowed</p>
                    {% endif %}
                  <form method = "POST" action = "{{ url_for('showPage', id = item.PID) }}">
                    {% for date in dates %}
                      <p class="card-text">{{date.startDate}} : {{date.endDate}}
                      <input type = "hidden" name = "start" value = "{{date.startDate}}">
                      <input type = "hidden" name = "end" value = "{{date.endDate}}">
                      <button type = "submit" name = "book">Book This</button></p>
                    {% endfor %}
                  </form>
                </div>
                <div>
                  
                  <button onclick="window.location.href='/edit/{{item.PID}}'" type="button" class="btn btn-dark">Edit</button>
                  <button onclick="window.location.href='/delete/{{item.PID}}'" type="button" class="btn btn-dark">Delete</button>
                </div>
              </div>
            </div>
          </div>
      </div>
{% endblock %}